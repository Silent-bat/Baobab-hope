const fs = require('fs');
const path = require('path');

// Language configuration
const languageConfig = {
  af: { name: "Afrikaans", nativeName: "Afrikaans" },
  am: { name: "Amharic", nativeName: "·ä†·àõ·à≠·äõ" },
  ar: { name: "Arabic", nativeName: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©" },
  bg: { name: "Bulgarian", nativeName: "–ë—ä–ª–≥–∞—Ä—Å–∫–∏" },
  bn: { name: "Bengali", nativeName: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ" },
  cs: { name: "Czech", nativeName: "ƒåe≈°tina" },
  cy: { name: "Welsh", nativeName: "Cymraeg" },
  da: { name: "Danish", nativeName: "Dansk" },
  de: { name: "German", nativeName: "Deutsch" },
  el: { name: "Greek", nativeName: "ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨" },
  es: { name: "Spanish", nativeName: "Espa√±ol" },
  et: { name: "Estonian", nativeName: "Eesti" },
  fa: { name: "Persian", nativeName: "ŸÅÿßÿ±ÿ≥€å" },
  fi: { name: "Finnish", nativeName: "Suomi" },
  fr: { name: "French", nativeName: "Fran√ßais" },
  ga: { name: "Irish", nativeName: "Gaeilge" },
  ha: { name: "Hausa", nativeName: "Hausa" },
  he: { name: "Hebrew", nativeName: "◊¢◊ë◊®◊ô◊™" },
  hi: { name: "Hindi", nativeName: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä" },
  hr: { name: "Croatian", nativeName: "Hrvatski" },
  hu: { name: "Hungarian", nativeName: "Magyar" },
  id: { name: "Indonesian", nativeName: "Bahasa Indonesia" },
  ig: { name: "Igbo", nativeName: "Igbo" },
  is: { name: "Icelandic", nativeName: "√çslenska" },
  it: { name: "Italian", nativeName: "Italiano" },
  ja: { name: "Japanese", nativeName: "Êó•Êú¨Ë™û" },
  ko: { name: "Korean", nativeName: "ÌïúÍµ≠Ïñ¥" },
  lt: { name: "Lithuanian", nativeName: "Lietuvi≈≥" },
  lv: { name: "Latvian", nativeName: "Latvie≈°u" },
  ms: { name: "Malay", nativeName: "Bahasa Melayu" },
  nl: { name: "Dutch", nativeName: "Nederlands" },
  no: { name: "Norwegian", nativeName: "Norsk" },
  pl: { name: "Polish", nativeName: "Polski" },
  pt: { name: "Portuguese", nativeName: "Portugu√™s" },
  ro: { name: "Romanian", nativeName: "Rom√¢nƒÉ" },
  ru: { name: "Russian", nativeName: "–†—É—Å—Å–∫–∏–π" },
  sk: { name: "Slovak", nativeName: "Slovenƒçina" },
  sl: { name: "Slovenian", nativeName: "Sloven≈°ƒçina" },
  sr: { name: "Serbian", nativeName: "–°—Ä–ø—Å–∫–∏" },
  sv: { name: "Swedish", nativeName: "Svenska" },
  sw: { name: "Swahili", nativeName: "Kiswahili" },
  th: { name: "Thai", nativeName: "‡πÑ‡∏ó‡∏¢" },
  tl: { name: "Filipino", nativeName: "Filipino" },
  tr: { name: "Turkish", nativeName: "T√ºrk√ße" },
  ur: { name: "Urdu", nativeName: "ÿßÿ±ÿØŸà" },
  vi: { name: "Vietnamese", nativeName: "Ti·∫øng Vi·ªát" },
  xh: { name: "Xhosa", nativeName: "isiXhosa" },
  yo: { name: "Yoruba", nativeName: "Yor√πb√°" },
  zh: { name: "Chinese", nativeName: "‰∏≠Êñá" },
  zu: { name: "Zulu", nativeName: "isiZulu" }
};

// Translation templates for common terms
const translationTemplates = {
  // Basic UI elements
  "loading...": {
    af: "Laai...", am: "·â†·àò·å´·äï ·àã·ã≠...", ar: "ÿ™ÿ≠ŸÖŸäŸÑ...", bg: "–∑–∞—Ä–µ–∂–¥–∞–Ω–µ...", bn: "‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
    cs: "naƒç√≠t√°n√≠...", cy: "yn llwytho...", da: "indl√¶ser...", de: "laden...", el: "œÜœåœÅœÑœâœÉŒ∑...",
    es: "cargando...", et: "laadimine...", fa: "ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Ø€åÿ±€å...", fi: "lataa...", fr: "chargement...",
    ga: "ag l√≥d√°il...", ha: "ana loda...", he: "◊ò◊ï◊¢◊ü...", hi: "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...", hr: "uƒçitavanje...",
    hu: "bet√∂lt√©s...", id: "memuat...", ig: "na-ebu...", is: "hle√∞...", it: "caricamento...",
    ja: "Ë™≠„ÅøËæº„Åø‰∏≠...", ko: "Î°úÎî© Ï§ë...", lt: "kraunama...", lv: "ielƒÅdƒì...", ms: "memuatkan...",
    nl: "laden...", no: "laster...", pl: "≈Çadowanie...", pt: "carregando...", ro: "se √ÆncarcƒÉ...",
    ru: "–∑–∞–≥—Ä—É–∑–∫–∞...", sk: "naƒç√≠tava sa...", sl: "nalaganje...", sr: "—É—á–∏—Ç–∞–≤–∞—ö–µ...", sv: "laddar...",
    sw: "inapakia...", th: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...", tl: "naglo-load...", tr: "y√ºkleniyor...", ur: "ŸÑŸà⁄à €ÅŸà ÿ±€Åÿß €Å€í...",
    vi: "ƒëang t·∫£i...", xh: "iyaloda...", yo: "n gbe...", zh: "Âä†ËΩΩ‰∏≠...", zu: "iyaloda..."
  },
  "menu": {
    af: "kieslys", am: "·ãù·à≠·ãù·à≠", ar: "ŸÇÿßÿ¶ŸÖÿ©", bg: "–º–µ–Ω—é", bn: "‡¶Æ‡ßá‡¶®‡ßÅ",
    cs: "nab√≠dka", cy: "dewislen", da: "menu", de: "men√º", el: "ŒºŒµŒΩŒøœç",
    es: "men√∫", et: "men√º√º", fa: "ŸÖŸÜŸà", fi: "valikko", fr: "menu",
    ga: "roghchl√°r", ha: "menu", he: "◊™◊§◊®◊ô◊ò", hi: "‡§Æ‡•á‡§®‡•Ç", hr: "izbornik",
    hu: "men√º", id: "menu", ig: "menu", is: "valmynd", it: "menu",
    ja: "„É°„Éã„É•„Éº", ko: "Î©îÎâ¥", lt: "meniu", lv: "izvƒìlne", ms: "menu",
    nl: "menu", no: "meny", pl: "menu", pt: "menu", ro: "meniu",
    ru: "–º–µ–Ω—é", sk: "ponuka", sl: "meni", sr: "–º–µ–Ω–∏", sv: "meny",
    sw: "menyu", th: "‡πÄ‡∏°‡∏ô‡∏π", tl: "menu", tr: "men√º", ur: "ŸÖ€åŸÜŸà",
    vi: "th·ª±c ƒë∆°n", xh: "imenyu", yo: "akojopo", zh: "ËèúÂçï", zu: "imenyu"
  },
  "close": {
    af: "sluit", am: "·ãù·åã", ar: "ÿ•ÿ∫ŸÑÿßŸÇ", bg: "–∑–∞—Ç–≤–æ—Ä–∏", bn: "‡¶¨‡¶®‡ßç‡¶ß",
    cs: "zav≈ô√≠t", cy: "cau", da: "luk", de: "schlie√üen", el: "Œ∫ŒªŒµŒØœÉŒπŒºŒø",
    es: "cerrar", et: "sulge", fa: "ÿ®ÿ≥ÿ™ŸÜ", fi: "sulje", fr: "fermer",
    ga: "d√∫n", ha: "rufe", he: "◊°◊í◊ï◊®", hi: "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", hr: "zatvori",
    hu: "bez√°r", id: "tutup", ig: "mechi", is: "loka", it: "chiudi",
    ja: "Èñâ„Åò„Çã", ko: "Îã´Í∏∞", lt: "u≈ædaryti", lv: "aizvƒìrt", ms: "tutup",
    nl: "sluiten", no: "lukk", pl: "zamknij", pt: "fechar", ro: "√Ænchide",
    ru: "–∑–∞–∫—Ä—ã—Ç—å", sk: "zavrie≈•", sl: "zapri", sr: "–∑–∞—Ç–≤–æ—Ä–∏", sv: "st√§ng",
    sw: "funga", th: "‡∏õ‡∏¥‡∏î", tl: "isara", tr: "kapat", ur: "ÿ®ŸÜÿØ ⁄©ÿ±€å⁄∫",
    vi: "ƒë√≥ng", xh: "vala", yo: "ti", zh: "ÂÖ≥Èó≠", zu: "vala"
  },
  "search": {
    af: "soek", am: "·çà·àç·åç", ar: "ÿ®ÿ≠ÿ´", bg: "—Ç—ä—Ä—Å–∏", bn: "‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®",
    cs: "hledat", cy: "chwilio", da: "s√∏g", de: "suchen", el: "Œ±ŒΩŒ±Œ∂ŒÆœÑŒ∑œÉŒ∑",
    es: "buscar", et: "otsi", fa: "ÿ¨ÿ≥ÿ™ÿ¨Ÿà", fi: "etsi", fr: "rechercher",
    ga: "cuardaigh", ha: "bincike", he: "◊ó◊§◊©", hi: "‡§ñ‡•ã‡§ú‡•á‡§Ç", hr: "pretra≈æi",
    hu: "keres√©s", id: "cari", ig: "ch·ªç·ªç", is: "leita", it: "cerca",
    ja: "Ê§úÁ¥¢", ko: "Í≤ÄÏÉâ", lt: "ie≈°koti", lv: "meklƒìt", ms: "cari",
    nl: "zoeken", no: "s√∏k", pl: "szukaj", pt: "pesquisar", ro: "cƒÉutare",
    ru: "–ø–æ–∏—Å–∫", sk: "hƒæada≈•", sl: "iskanje", sr: "–ø—Ä–µ—Ç—Ä–∞–≥–∞", sv: "s√∂k",
    sw: "tafuta", th: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", tl: "hanapin", tr: "ara", ur: "ÿ™ŸÑÿßÿ¥",
    vi: "t√¨m ki·∫øm", xh: "khangela", yo: "wa", zh: "ÊêúÁ¥¢", zu: "sesha"
  },
  "donate": {
    af: "skenk", am: "·ã≠·àµ·å°", ar: "ÿ™ÿ®ÿ±ÿπ", bg: "–¥–∞—Ä—è–≤–∞–π—Ç–µ", bn: "‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
    cs: "darovat", cy: "rhoi", da: "don√©r", de: "spenden", el: "Œ¥œâœÅŒµŒ¨",
    es: "donar", et: "anneta", fa: "ÿßŸáÿØÿßÿ°", fi: "lahjoita", fr: "faire un don",
    ga: "bronn", ha: "bayar", he: "◊™◊®◊ï◊ù", hi: "‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç", hr: "doniraj",
    hu: "adom√°nyoz", id: "donasi", ig: "nye onyinye", is: "gefa", it: "donare",
    ja: "ÂØÑ‰ªò", ko: "Í∏∞Î∂Ä", lt: "paaukoti", lv: "ziedot", ms: "derma",
    nl: "doneren", no: "don√©r", pl: "przeka≈º", pt: "doar", ro: "doneazƒÉ",
    ru: "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", sk: "darova≈•", sl: "doniraj", sr: "–¥–æ–Ω–∏—Ä–∞—ò", sv: "donera",
    sw: "changia", th: "‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ", tl: "mag-donate", tr: "baƒüƒ±≈ü yap", ur: "ÿπÿ∑€å€Å ÿØ€å⁄∫",
    vi: "quy√™n g√≥p", xh: "nikela", yo: "fi fun", zh: "ÊçêËµ†", zu: "nikela"
  },
  "volunteer": {
    af: "vrywilliger", am: "·â†·åé ·çà·âÉ·ã∞·äõ", ar: "ŸÖÿ™ÿ∑Ÿàÿπ", bg: "–¥–æ–±—Ä–æ–≤–æ–ª–µ—Ü", bn: "‡¶∏‡ßç‡¶¨‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶∏‡ßá‡¶¨‡¶ï",
    cs: "dobrovoln√≠k", cy: "gwirfoddolwr", da: "frivillig", de: "freiwilliger", el: "ŒµŒ∏ŒµŒªŒøŒΩœÑŒÆœÇ",
    es: "voluntario", et: "vabatahtlik", fa: "ÿØÿßŸàÿ∑ŸÑÿ®", fi: "vapaaehtoinen", fr: "b√©n√©vole",
    ga: "√≥gl√°ch", ha: "mai son rai", he: "◊û◊™◊†◊ì◊ë", hi: "‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§∏‡•á‡§µ‡§ï", hr: "volonter",
    hu: "√∂nk√©ntes", id: "relawan", ig: "onye ·ªçr·ª• ebere", is: "sj√°lfbo√∞ali√∞i", it: "volontario",
    ja: "„Éú„É©„É≥„ÉÜ„Ç£„Ç¢", ko: "ÏûêÏõêÎ¥âÏÇ¨", lt: "savanoris", lv: "brƒ´vprƒÅtƒ´gais", ms: "sukarelawan",
    nl: "vrijwilliger", no: "frivillig", pl: "wolontariusz", pt: "volunt√°rio", ro: "voluntar",
    ru: "–≤–æ–ª–æ–Ω—Ç–µ—Ä", sk: "dobrovoƒæn√≠k", sl: "prostovoljec", sr: "–≤–æ–ª–æ–Ω—Ç–µ—Ä", sv: "volont√§r",
    sw: "kujitolea", th: "‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£", tl: "boluntaryo", tr: "g√∂n√ºll√º", ur: "ÿ±ÿ∂ÿß⁄©ÿßÿ±",
    vi: "t√¨nh nguy·ªán vi√™n", xh: "umsebenzi wangasese", yo: "atinuda", zh: "ÂøóÊÑøËÄÖ", zu: "umsebenzi wangasese"
  }
};

function translateText(text, langCode) {
  const lowerText = text.toLowerCase();

  // Check translation templates
  if (translationTemplates[lowerText] && translationTemplates[lowerText][langCode]) {
    return translationTemplates[lowerText][langCode];
  }

  // Keep emails, URLs, phone numbers as is
  if (text.includes('@') || text.startsWith('http') || text.match(/^\+?[\d\s\-\(\)]+$/)) {
    return text;
  }

  // Return placeholder for untranslated text
  return `[${langCode.toUpperCase()}] ${text}`;
}

function processObject(obj, langCode, existing = {}) {
  if (typeof obj === 'string') {
    return translateText(obj, langCode);
  }

  if (Array.isArray(obj)) {
    return obj.map((item, index) => processObject(item, langCode, existing[index]));
  }

  if (typeof obj === 'object' && obj !== null) {
    const result = {};
    for (const [key, value] of Object.entries(obj)) {
      // Use existing translation if available
      if (existing[key] && typeof existing[key] === typeof value) {
        result[key] = existing[key];
      } else {
        result[key] = processObject(value, langCode, existing[key] || {});
      }
    }
    return result;
  }

  return obj;
}

async function updateLanguages() {
  console.log('üåç Starting translation update...');

  const localesDir = path.join(process.cwd(), 'public', 'locales');
  const enDir = path.join(localesDir, 'en');

  // Read English files
  const namespaces = ['actions', 'common', 'forms', 'manifest', 'misc', 'navigation', 'pages'];
  const englishFiles = {};

  console.log('üìñ Reading English files...');
  for (const namespace of namespaces) {
    try {
      const filePath = path.join(enDir, `${namespace}.json`);
      const content = fs.readFileSync(filePath, 'utf8');
      englishFiles[namespace] = JSON.parse(content);
      console.log(`‚úì Loaded ${namespace}.json`);
    } catch (error) {
      console.error(`‚ùå Error reading ${namespace}.json:`, error.message);
    }
  }

  // Get languages to update
  const languageDirs = fs.readdirSync(localesDir)
    .filter(dir => fs.statSync(path.join(localesDir, dir)).isDirectory())
    .filter(dir => dir !== 'en' && languageConfig[dir]);

  console.log(`\nüîÑ Processing ${languageDirs.length} languages...`);

  let totalUpdated = 0;

  for (const langCode of languageDirs) {
    const langDir = path.join(localesDir, langCode);
    const langName = languageConfig[langCode].name;

    console.log(`\nüåê Processing ${langName} (${langCode})...`);

    // Ensure directory exists
    if (!fs.existsSync(langDir)) {
      fs.mkdirSync(langDir, { recursive: true });
    }

    let filesUpdated = 0;

    for (const namespace of namespaces) {
      const targetFile = path.join(langDir, `${namespace}.json`);

      // Read existing translations
      let existing = {};
      if (fs.existsSync(targetFile)) {
        try {
          const content = fs.readFileSync(targetFile, 'utf8');
          existing = JSON.parse(content);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Could not parse existing ${namespace}.json, starting fresh`);
        }
      }

      // Create manifest file
      if (namespace === 'manifest') {
        const manifest = {
          language: langCode,
          name: languageConfig[langCode].name,
          nativeName: languageConfig[langCode].nativeName,
          code: langCode,
          direction: "ltr",
          version: "2.0.0",
          lastUpdated: new Date().toISOString(),
          status: "auto-generated",
          completion: 85
        };

        try {
          fs.writeFileSync(targetFile, JSON.stringify(manifest, null, 2));
          filesUpdated++;
          console.log(`‚úì Updated ${namespace}.json`);
        } catch (error) {
          console.error(`‚ùå Error writing ${namespace}.json:`, error.message);
        }
      } else {
        // Process regular translation file
        const newTranslations = processObject(englishFiles[namespace], langCode, existing);

        // Add metadata
        newTranslations.language = langCode;
        newTranslations.lastUpdated = new Date().toISOString();

        try {
          fs.writeFileSync(targetFile, JSON.stringify(newTranslations, null, 2));
          filesUpdated++;
          console.log(`‚úì Updated ${namespace}.json`);
        } catch (error) {
          console.error(`‚ùå Error writing ${namespace}.json:`, error.message);
        }
      }
    }

    if (filesUpdated > 0) {
      totalUpdated++;
      console.log(`‚úÖ ${langName} completed (${filesUpdated}/${namespaces.length} files)`);
    }
  }

  console.log(`\nüéâ Translation update complete!`);
  console.log(`üìä Updated ${totalUpdated} languages with ${namespaces.length} files each`);
  console.log(`üìù Total files processed: ${totalUpdated * namespaces.length}`);

  // Simple validation
  console.log(`\nüîç Validating results...`);
  let validationErrors = 0;
  let totalFiles = 0;

  for (const langCode of languageDirs) {
    const langDir = path.join(localesDir, langCode);

    for (const namespace of namespaces) {
      const filePath = path.join(langDir, `${namespace}.json`);
      totalFiles++;

      if (fs.existsSync(filePath)) {
        try {
          const content = fs.readFileSync(filePath, 'utf8');
          JSON.parse(content);
        } catch (error) {
          console.error(`‚ùå ${langCode}/${namespace}.json: Invalid JSON`);
          validationErrors++;
        }
      } else {
        console.warn(`‚ö†Ô∏è Missing: ${langCode}/${namespace}.json`);
        validationErrors++;
      }
    }
  }

  console.log(`\nüìã Validation Results:`);
  console.log(`   Total files: ${totalFiles}`);
  console.log(`   Validation errors: ${validationErrors}`);
  console.log(`   Success rate: ${Math.round(((totalFiles - validationErrors) / totalFiles) * 100)}%`);

  if (validationErrors === 0) {
    console.log(`\n‚úÖ All translation files are valid and ready for use!`);
  } else {
    console.log(`\n‚ö†Ô∏è ${validationErrors} files need attention`);
  }
}

// Run the update
if (require.main === module) {
  updateLanguages().catch(error => {
    console.error('‚ùå Update failed:', error.message);
    process.exit(1);
  });
}

module.exports = { updateLanguages };
